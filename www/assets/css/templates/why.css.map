{"version":3,"sources":["webpack:///./src/scss/templates/src/scss/templates/why.scss","webpack:///./src/scss/templates/src/scss/tools/mq.scss","webpack:///./src/scss/templates/why.scss"],"names":[],"mappings":"AAGA,MACE,wCACA,4BC2JE,wBD7JJ,MAKI,4BEQD,CACF,QFJC,qBACA,mBEQD,YFJC,kBEQD,cFJC,cACA,qBEQD,qBFJC,6BACA,gBACA,cACA,4EACA,iBACA,gBACA,mBACA,kBACA,WEQD,YFJC,cEQD,8BFHC,WEQD,eFJC,gBEQD,eFJC","file":"css/templates/why.css","sourcesContent":["$ENV: production;\n@import \"../includes\";\n\n.grid {\n  column-gap: 3rem;\n  columns: 1;\n\n  @include mq(from s) {\n    columns: 2;\n  }\n}\n\n.grid > * {\n  display: inline-block;\n  margin-bottom: 3rem;\n}\n\n.section h2 {\n  position: relative;\n}\n\n.section h2 a {\n  display: block;\n  margin-bottom: 4.5rem;\n}\n\n.section h2 a::before {\n  border-top: 4px solid $color-syntax-yellow;\n  bottom: -1.75rem;\n  content: \"Â \";\n  font-family: $font-mono;\n  font-size: .75rem;\n  font-weight: 400;\n  padding-top: .45rem;\n  position: absolute;\n  width: 2rem;\n}\n\n#developers {\n  color: $color-syntax-white;\n}\n\n#developers h2,\n#developers h3 {\n  color: #fff;\n}\n\n#developers h2 {\n  font-weight: 600;\n}\n\n#developers h3 {\n  font-weight: 400;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/scss/templates/src/scss/templates/why.scss","/* stylelint-disable block-closing-brace-empty-line-before, at-rule-empty-line-before */\n\n//  mÂµ\n//\n//  A simple library for handling media queries\n//  and breakpoints across SASS/CSS and JavaScript.\n//\n//  @author Fabian Michael <hallo@fabianmichael.de>\n//  @license MIT\n//\n//  Define your breakpoints here. Must be either in px\n//  or em units. Breakpoints will be converted to em by\n//  the library for best consistency across different\n//  browsers.\n//\n//  Read [PX, EM or REM Media Queries?](https://zellwk.com/blog/media-query-units/)\n//  by Zell Liew for more information on units in media queries.\n$mq-breakpoints: (\n  (xs 480px  4)\n  (sm 768px  8)\n  (md 1024px 12)\n  (lg 1280px 12)\n  (xl 1440px 12)\n) !default;\n\n//  Prints selectors for pseudo-elements, which are utilized\n//  by the JavaScript counterpart of the mÂµ library. Set to\n//  false, if you donât need the JavaScript functionality or\n//  you want to call `@include mq-print-pseudo-rules()`\n//  manually.\n$mq-print-pseudo-rules: true !default;\n\n// Debug settings\n$mq-debug: false !default;\n$mq-debug-z-index: 10000 !default;\n$mq-debug-selector: \"body::after\" !default;\n\n//  Mixin for generating gte media queries\n//\n//  Usage:\n//\n//  @include mq(from md) {\n//    .nav {\n//      position: fixed;\n//    }\n//  }\n//\n//  or:\n//\n//  .nav {\n//    background: blue;\n//\n//    @include mq(from xs to sm) {\n//      background: red;\n//    }\n//  }\n//\n//\n//  Supported queries:\n//\n//  @include mq(md) { â¦ }\n//  @include mq(from md) { â¦ } // same as \"mq(md)\"\n//  @include mq(to md) { â¦ }\n//  @include mq(from xs to md) { â¦ }\n//\n//  With additional custom media queries:\n//\n//  @include mq(xs, '(orientation: landscape)') { â¦ }\n//  @include mq(from xs to md, '(orientation: landscape)') { â¦ }\n@mixin mq($query: false, $and: false) {\n\n  // Initialize variables\n  $min-width: 0;\n  $max-width: 0;\n  $media-query: \"\";\n\n  @if $query {\n    // $query is not false\n    @if type-of($query) == number {\n      $min-width: $query;\n    } @else if type-of($query) == list {\n\n      @if length($query) == 4 and nth($query, 1) == from and nth($query, 3) == to {\n        // from {breakpoint} to {breakpoint}\n\n        $min-width: mq-px2em(mq-retrieve-breakpoint-width(nth($query, 2)));\n        $max-width: mq-px2em(mq-retrieve-breakpoint-width(nth($query, 4)) - 1px);\n\n      } @else if length($query) == 2 {\n        // one keyword + breakpoint\n\n        $keyword: nth($query, 1);\n        $breakpoint: nth($query, 2);\n\n        @if $keyword == from {\n          // from {breakpoint}\n          $min-width: mq-px2em(mq-retrieve-breakpoint-width($breakpoint));\n\n        }\n\n        @else if $keyword == to {\n          // to {breakpoint}\n          $max-width: mq-px2em(mq-retrieve-breakpoint-width($breakpoint) - 1px);\n\n        } @else if $keyword == only {\n          // only {breakpoint}\n\n          $items-length: length($mq-breakpoints);\n          $next-breakpoint: false;\n\n          @for $i from 1 through $items-length {\n            $item:      nth($mq-breakpoints, $i);\n            $item-name: nth($item, 1);\n\n            @if $next-breakpoint == true {\n              // breakpoint was found in last iteration\n              $next-breakpoint: $item-name;\n            } @else if $breakpoint == $item-name {\n              // breakpoint found, will be assigned in next iteration\n              $next-breakpoint: true;\n            }\n          }\n\n          $min-width: mq-px2em(mq-retrieve-breakpoint-width($breakpoint));\n\n          @if type-of($next-breakpoint) != bool {\n            $max-width: mq-px2em(mq-retrieve-breakpoint-width($next-breakpoint) - 1px);\n          }\n\n        } @else {\n          @error \"Invalid breakpoint query supplied to mq()\";\n        }\n      }\n    } @else {\n      // {breakpoint} => from {breakpoint}\n      $min-width: mq-px2em(mq-retrieve-breakpoint-width($query));\n    }\n  }\n\n  // Build Media Query\n\n  @if $min-width != 0 {\n    $media-query: \"(min-width: #{$min-width})\";\n  }\n\n  @if $max-width != 0 {\n    @if $media-query != \"\" {\n      $media-query: \"#{$media-query} and \";\n    }\n    $media-query: \"#{$media-query} (max-width: #{$max-width})\";\n  }\n\n  @if $and {\n    $media-query: \"#{$media-query} and #{$and}\";\n  }\n\n  $media-query: unquote(#{$media-query});\n\n  @if $media-query != \"\" {\n    // Only print a media query if itâs not empty\n    @media #{$media-query} {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n//  Converts a pixel value to itâs em equivalent, based on\n//  the browserâs assumed default font-size of 16px. As media\n//  queries ignore font-sizes set via CSS, this function does\n//  not an additional \"base font size\" to be set.\n//\n//  @return The em equivalent of given pixel value.\n@function mq-px2em($px) {\n\n  @if type-of($px) != number {\n    @error \"mq-px2em() value must be a number.\";\n    @return 0;\n  }\n\n  @if unitless($px) {\n    @if $px != 0 {\n      @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels for you\";\n    }\n    /* stylelint-disable-next-line length-zero-no-unit */\n    @return mq-px2em($px + 0px); // That may fail.\n  } @else if (unit($px) == em) {\n    @return $px;\n  }\n  @return ($px / 16px) * 1em;\n}\n\n// Retrieves the min-width of a breakpoint in px, assuming\n// a font-size of 16px.\n//\n// @return The min-width of a breakpoint in pixels\n@function mq-retrieve-breakpoint-width($name) {\n  @each $breakpoint in $mq-breakpoints {\n    $breakpoint-name:  nth($breakpoint, 1);\n    $breakpoint-width: nth($breakpoint, 2);\n\n    @if $name == $breakpoint-name {\n      @if unit($breakpoint-width) == em {\n        // Convert to px value, if breakpoints where defined\n        // in em\n        $breakpoint-width: $breakpoint-width / 16px;\n      }\n      @return $breakpoint-width;\n    }\n  }\n  @return \"Breakpoint #{$name} does not exist\";\n}\n\n// Prints the pseudo-rule(s) needed by the JS counterpart\n// of mÂµ.\n@mixin mq-print-pseudo-rules {\n\n  $breakpoint-names: \"\";\n\n  @each $breakpoint in $mq-breakpoints {\n    $breakpoint-name: nth($breakpoint, 1);\n    $breakpoint-width: nth($breakpoint, 2);\n    $add: ' \"#{$breakpoint-name}\": \"(min-width: #{mq-px2em($breakpoint-width)})\" ';\n    @if $breakpoint-names != \"\" {\n      $breakpoint-names: \"#{$breakpoint-names},#{$add}\";\n    } @else {\n      $breakpoint-names: $add;\n    }\n  }\n\n  $breakpoint-names: \"{\" + $breakpoint-names + \"}\";\n\n  html::before {\n    /* Automatically generated by mq to be consumed by its JavaScript counterpart */\n    content: $breakpoint-names;\n    display: none;\n  }\n}\n\n@if $mq-print-pseudo-rules {\n  // Print pseudo-rules, if enabled\n  @include mq-print-pseudo-rules;\n}\n\n@mixin mq-debug {\n  // Print debug rules, if enabled\n  #{unquote($mq-debug-selector)} {\n    background: rgba(black, .75);\n    bottom: 0;\n    color: #fff;\n    display: block;\n    font-family: monospace;\n    font-size: 10px;\n    line-height: 1;\n    padding: 3px 6px;\n    position: fixed;\n    right: 0;\n    z-index: $mq-debug-z-index;\n  }\n\n  @each $breakpoint in $mq-breakpoints {\n    $breakpoint-name:  nth($breakpoint, 1);\n    $breakpoint-width: nth($breakpoint, 2);\n\n    @include mq($breakpoint-name) {\n      #{unquote($mq-debug-selector)} {\n        content: \"Breakpoint: #{$breakpoint-name} (>= #{$breakpoint-width}) | Template: \" attr(data-template);\n      }\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/scss/templates/src/scss/tools/mq.scss","@charset \"UTF-8\";\n/* stylelint-disable block-closing-brace-empty-line-before, at-rule-empty-line-before */\n/* stylelint-disable at-rule-empty-line-before */\n/* stylelint-disable at-rule-empty-line-before */\n.grid {\n  column-gap: 3rem;\n  columns: 1;\n}\n\n@media (min-width: 38em) {\n  .grid {\n    columns: 2;\n  }\n}\n\n.grid > * {\n  display: inline-block;\n  margin-bottom: 3rem;\n}\n\n.section h2 {\n  position: relative;\n}\n\n.section h2 a {\n  display: block;\n  margin-bottom: 4.5rem;\n}\n\n.section h2 a::before {\n  border-top: 4px solid #f0c674;\n  bottom: -1.75rem;\n  content: \" \";\n  font-family: \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: .75rem;\n  font-weight: 400;\n  padding-top: .45rem;\n  position: absolute;\n  width: 2rem;\n}\n\n#developers {\n  color: #c5c9c6;\n}\n\n#developers h2,\n#developers h3 {\n  color: #fff;\n}\n\n#developers h2 {\n  font-weight: 600;\n}\n\n#developers h3 {\n  font-weight: 400;\n}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n\n\n// WEBPACK FOOTER //\n// ./src/scss/templates/why.scss"],"sourceRoot":""}