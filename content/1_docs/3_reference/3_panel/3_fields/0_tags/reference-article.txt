Title: Tags

----

Excerpt:

An interactive tags input field with autocompletion

----

Guide: blueprints/fields

----

Text:

The tags field is perfect for multiple variable options, which should be stored in a single field. It comes with built-in autocompletion for options and an intuitive interface for adding and removing multiple tags.

(screenshot: tags.png)

## Example

```yaml
fields:
  tags:
    label: Tags
    type: tags
```

## Field properties

(field-options: tags)


## Autocomplete

For autocompletion to work, you need to set the `options` attribute.  Options can be a fixed list (see below) or [dynamic options](#dynamic-options) using the query option.

```yaml
fields:
  tags:
    label: Tags
    type: tags
    options:
      - Design
      - Architecture
      - Photography
      - 3D
      - Web
```

You can also define different `value` and `text` for options:

```yaml
fields:
  tags:
    label: Tags
    type: tags
    options:
      - value: study/design
        text: Design
      - value: study/architecture
        text: Architecture
```

(docs: panel-field-options field: tags)


## Limit input to options

Using the `accept` property, you can limit tag input to the query options:

```yaml
tags:
    label: Tags
    type: tags
    accept: options
    options: query
    query:
       fetch: site.tags.split
```

## Tags field layout

Tags can also be shown as a list using the `layout` property:

```yaml
fields:
  tags:
    label: Tags
    type: tags
    layout: list
```

(screenshot: tags-list-layout.png)

## How to use in templates/snippets

A tags field stores all selected values in a comma separated list (`value1, value2, value3`) You can split this list with the [`split()`](/docs/reference/templates/field-methods/split) method in your templates and then work with the result:

```php
<ul>
  <?php foreach ($page->categories()->split() as $category): ?>
  <li><?= $category ?></li>
  <?php endforeach ?>
</ul>
```

If you use another separator than the default comma, you have to pass this separator to the `split()` method, for example when using `|` as separator:

```php
<ul>
  <?php foreach ($page->categories()->split('|') as $category): ?>
  <li><?= $category ?></li>
  <?php endforeach ?>
</ul>
```

See [`$field->split()`](/docs/reference/templates/field-methods/split) for more information.