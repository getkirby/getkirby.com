Title: Files section

----

Excerpt:

List, edit and upload files

----

Text:

The files section can be used to show any combination of files for the current page or any other page in your site.

(screenshot: files.png)

## Example

```yaml "/site/blueprints/pages/project.yml"
title: Project

sections:
  gallery:
    headline: Gallery
    type: files
    template: gallery
```
<since v="3.3.0">
## Section shortcuts

For simple sections that are only used once per blueprint, you can use shortcuts. In its most basic form, a `files` section consists of the section type as name, and  `true` as its value.

```yaml
sections:

  files: true
```
This will add a `files` section with all default properties.

These shortcuts can be extended with other section properties as needed, for example:

```yaml
sections:

  files: 
    headline: My Files
    template: cover
```
Keep in mind that the same section name can only be used once per blueprint.
</since>

## Section properties

The files section has multiple options to control what kind of files should be displayed, how they should be displayed and what happens if a new file is uploaded.

(section-options: files)

## Headline

The headline will be displayed above the files section. You can pass a simple headline as a string or you can provide translations for multiple languages, if you have an international editing team.

### Single language

```yaml
headline: Gallery
```

### Multiple languages
```yaml
headline:
  en: Gallery
  de: Galerie
  es: Galer√≠a
```

### Placeholders

You can inject information from the current page into the headline with template placeholders using our (link: docs/guide/blueprints/query-language text: query language).

```yaml
headline: "{{ page.title }} Gallery"
```

## Layout

The files can either be displayed as a simple list or as cards with preview images. The list view is the default view.

### List layout (default)

The `list` layout is perfect for file types without thumbnails like PDFs, excel files, or any other docs. It can also be quite helpful for long galleries that would take up too much space as cards.

```yaml
layout: list
```

(screenshot: list.png)

### Cards layout

The `card` layout is great for all kinds of images.

```yaml
layout: cards
```

(screenshot: cards.png)

## File information

You can fine-tune the display text and additional information for every file in the list with the `text` and `info` options.

### `text`

By default the filename is shown in the list for every file. You can use our template syntax with (link: docs/guide/blueprints/query-language text: query language) to fetch any information from the file and display that instead of the filename.

```yaml
text: "{{ file.alt }}"
```

### `info`

If you want to display additional information for each file, like a caption, category or any other field value, you can use the template syntax with (link: docs/guide/blueprints/query-language text: query language) in the `info` option.

```yaml
info: "{{ file.dimensions }}"
```

## Preview images

The (preview) image for each item in the list is configured with the `image` option:

### `cover`

Whether or not the image will cover the available space.
Options: `true`, `false (default)`

```yaml
image:
  cover: true
```

#### Examples

| `cover: true` | `cover: false` |
| -   | -   |
| (screenshot: cover.png) | (screenshot: no-cover.png) |

### `ratio`

A freely definable image ratio.

```yaml
image:
  ratio: 16/9
```

#### Examples

| `ratio: 2/3` | `ratio: 1/1` | `ratio: 3/2` | `ratio: 16/9` |
| -   | -   | -   | -    |
| (screenshot: 2by3.png) | (screenshot: 1by1.png) | (screenshot: 3by2.png) | (screenshot: 16by9.png) |

<info>
You are not limited to the example ratios above. In fact, Kirby calculates the ratio for you as long as you enter it in the format **`a/b`**
</info>

### `back`

Set an image background.
Options: `pattern (default)`, `black`, `white`
```yaml

image:
  cover: true
  ratio: 1/1
  back: black
```

#### Examples

| `back: pattern` | `back: black` | `back: white` |
| -   | -   | -   |
| (screenshot: pattern.png) | (screenshot: black.png) | (screenshot: white.png) |

## Empty state

With the `empty` option you can define the message which is displayed when no files are listed in the section.

```yaml
empty: No documents yet
```

## Filtering files

### `parent`

By default, the current page is being used as the parent to find files for the list. With this option, any page on your site can be the parent of the section.

```yaml
parent: site.find("galleries").first
```

### Template

You can define which template each file in the list must have. This `template` option will also be applied to any new file that gets uploaded. Blueprints for file templates can be setup in `/site/blueprints/files`.

```yaml
template: cover
```

## Sorting

### `sortBy`

You can sort the list of files by a given field in descending or ascending order.

```yaml
sortBy: filename desc
```

<since v="3.2.3">
You can pass (link: https://www.php.net/manual/en/function.sort.php text: PHP sorting type flags), for example to make sorting work with special language specific characters.

```yaml
sortBy: filename SORT_LOCALE_STRING
sortBy: filename asc SORT_LOCALE_STRING
```
</since>

<info>
The `sortBy` option will automatically switch off manual sorting.
</info>

### `sortable`

You can switch off manual sorting entirely with the `sortable` option.

```yaml
sortable: false
```

### `flip`

<since v="3.3.0">

Use the `flip` option to enable/disable reverse sorting (default is `false`):

```yaml
sortBy: filename
flip: true
```

</since>

## Limits

### `limit`

The `limit` property sets how many files will be shown per page. If there are more entries in the section, the pagination navigation will be shown at the bottom of the section.

```yaml
limit: 20
```

### `max`

You can define a maximum number of files, that will be allowed in this section. After the maximum is reached, the upload button will be hidden and no more files can be uploaded.

```yaml
max: 10
```

### `min`

You can also define the minimum number of files, that need to be added in order to make the parent page valid.

```yaml
min: 2
```

(docs: sections/conditional-sections)