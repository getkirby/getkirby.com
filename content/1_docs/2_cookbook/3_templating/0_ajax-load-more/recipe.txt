Title: Load more with Ajax

----


Published: 2021-01-15

----

Description: Add a load more button to your listings and append items via Ajax.

----

Text:

## Requirements

- A fresh Kirby (link: try text: Starterkit) as our basis
- Familiarity with the Kirby API, templates and controllers is useful

## Intro

When creating a portfolio, blog or image gallery webpage, we often only want to show a limited number of projects, articles or images at first load, but give visitors the possibility to load more with a button. In this recipe, we will go through the steps needed to implement such a solution.

We will base this recipe off the photography page in Kirby's Starterkit with lists a number of subpages with an image and a title.

## HTML Template

The photography page uses the `photography.php` (glossary: template text: template), which untouched looks like this:

```php "/site/templates/photography.php"
<?php snippet('header') ?>
<?php snippet('intro') ?>

<ul class="grid" style="--gutter: 1.5rem">
  <?php foreach ($page->children()->listed() as $project): ?>
  <li class="column" style="--columns: 3">
    <a href="<?= $project->url() ?>">
      <figure>
        <span class="img" style="--w:4;--h:5">
          <?= ($cover = $project->cover()) ? $cover->crop(400, 500) : null ?>
        </span>
        <figcaption class="img-caption">
          <?= $project->title()->html() ?>
        </figcaption>
      </figure>
    </a>
  </li>
  <?php endforeach ?>
</ul>

<?php snippet('footer') ?>
```

As a first step, let's move the `<li>` element from the template into a separate (glossary: snippet text: snippet) called `project.php`…

```php "/site/snippets/project.php"
  <li class="column" style="--columns: 3">
    <a href="<?= $project->url() ?>">
      <figure>
        <span class="img" style="--w:4;--h:5">
          <?= ($cover = $project->cover()) ? $cover->crop(400, 500) : null ?>
        </span>
        <figcaption class="img-caption">
          <?= $project->title()->html() ?>
        </figcaption>
      </figure>
    </a>
  </li>
```

… and replace this element with the newly created snippet in the template:

```php "/site/templates/photography.php"
<?php snippet('header') ?>
<?php snippet('intro') ?>

<ul class="grid" style="--gutter: 1.5rem">
  <?php foreach ($page->children()->listed() as $project): ?>
    <?php snippet('project', ['project' => 'project']) ?>
  <?php endforeach ?>
</ul>

<?php snippet('footer') ?>
```

Next, we add a load-more button after the project list and replace `$page->children()->listed()` with `$projects`. We will define this variable in the next step in a (glossary: controller text: controller).

```php "/site/templates/photography.php"
<?php snippet('header') ?>
<?php snippet('intro') ?>

<ul class="grid" style="--gutter: 1.5rem">
  <?php foreach ($projects as $project): ?>
    <?php snippet('project', ['project' => $project]) ?>
  <?php endforeach ?>
</ul>
<button class="load-more">Load more</button>
<?php snippet('footer') ?>
```

## HTML controller

We will now put the logic we need into a new controller. Create a new `photography.php` controller in `site/controllers` with the following code:

```php "/site/controllers/photography.php"
<?php

return function ($page) {
  
  $limit    = 4;
  $projects = $page->children()->listed()->limit($limit);

  return [
      'limit'    => $limit,
      'projects' => $projects,    
    ];
};
```

Here we define the `$projects` variable and limit the collection to the limit set in the `$limit` variable, in this case 4.

If we visit the page in the browser at this point, we will see four projects and our fancy load-more button. Of course, clicking on the button won't do anything yet.

(screenshot: load-more.png)

## JSON controller

To implement the logic for the load-more functionality, we create the controller for the JSON (glossary: content-representation text: content representation).

This content representation will be available at the url `localhost/photography.json` and is the URL we will use in our JavaScript in the next step.

```php "/site/controllers/photography.json.php"
<?php

return function ($page) {
  
  $projects = $page->children()->listed();
  $limit    = 4;
  $offset   = intval(get('offset'));
  $more     = $projects->count() > $offset + $limit;
  $projects = $projects->offset($offset)->limit($limit);

  return [
      'projects' => $projects,
      'more'     => $more,
      'html'     => '',
      'json'     => [],
    ];
};
```

We need a bit more logic here than in the `photography.php` controller.

```php
$offset = intval(get('offset'));
``` 
With the offset we tell Kirby to start fetching projects starting from the number we have shown initially. The first time the content representation is called, the offset will therefore be 4 then 8 etc. We get the offset from the query string of the AJAX call (see below in the JS part).


```php
$more = $count > $offset + $limit;
```

The `$more` variable is a boolean and checks if there are any projects left to be fetched, which is the case as long as the project countsis higher than the sum of `$offset` and `$limit`.

## JSON template

We are slowly getting there… Our JSON representation controller now needs a corresponding template that returns the JSON encoded data:

```php "/site/templates/photography.json.php"
<?php

foreach($projects as $project) {

  $html .= snippet('project', ['project' => $project], true);

}
$json['html'] = $html;
$json['more'] = $more;

echo json_encode($json);
```

Again we loop through the projects as before in the HTML template and call the same snippet. This time, we store everything the `$html` variable, which we add to the `$json` array together with the `$more` variable we defined in the controller. Finally, we encode the array.

## HTML template, part 2

Before we can get to our last missing piece, the JavaScript, we have to modify our `ul` element in the template a little bit. We add the class `projects` and the `data-limit` attribute, so that we can fetch the limit in our JS.

```php "/site/templates/photography.php"
<?php snippet('header') ?>
<?php snippet('intro') ?>

<ul class="grid projects"  data-limit="<?= $limit ?>" style="--gutter: 1.5rem">
  <?php foreach ($projects as $project): ?>
    <?php snippet('project', ['project' => $project]) ?>
  <?php endforeach ?>
</ul>
<button class="load-more">Load more</button>
<?php snippet('footer') ?>
```

## Javascript

Finally, our last step. Add the following script in `assets/js/templates/photography.js`. By adding this script to this location, we make sure that it is only loaded for the `photography.php` template. And because the footer already has the (link: docs/reference/templates/helpers/js#example__autoloading-template-specific-script-files text: `@auto` parameter) to auto-load all template specific JS files, we don't have to require it specifically.

<info>
If you put the script file into another location, make sure to load it in the footer.
</info>

```js "assets/js/templates/photography.js"
const element = document.querySelector('.projects');
const button  = document.querySelector('.load-more');
const limit   = parseInt(element.getAttribute('data-limit'));
let offset    = limit;

const fetchProjects = async () => {
  let url = `${window.location.href}.json?offset=${offset}`;
  try {
    const response       = await fetch(url);
    const { html, more } = await response.json();
    button.hidden        = !more;
    element.innerHTML    += html;
    offset               += limit;
  } catch (error) {
    console.log('Fetch error: ', error);
  }
}
button.addEventListener('click', fetchProjects);
```

First we define a set of variables that we need for fetching the projects later on:

```js
// the container `ul` to which we will later append the other other project
const element = document.querySelector('.projects');
// the load-more button
const button  = document.querySelector('.load-more');
// the limit from the data attribute
const limit   = parseInt(element.getAttribute('data-limit'));
// at the outset, the offset equals the limit
let offset    = limit;
```

With

```js
button.addEventListener('click', fetchProjects);
```

we add an event listener to the button which calls the closure stored in the `fetchProjects` variable.

Inside the closure, we make a fetch request to the JSON representation (current URL suffixed with `.json` plus the offset query), and on success, we add the elements to the DOM.

When there are no more elements to fetch, we hide the button:

```js
button.hidden = !data.more;
```

That was it. If you want to check if a second or third click works as well, publish the draft that is still lurking in the photography page or add some new cool projects of your own.

