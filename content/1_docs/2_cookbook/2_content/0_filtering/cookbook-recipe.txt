Title: Filtering compendium

----

Description: Filter pages, files and users with Kirby's extensive filtering methods.

----

Text:

This guide will give you an overview about the many ways you can filter collections of pages, files, users, structures, languages or general collections in Kirby.

<warning>
Try to avoid filtering the complete site index (`$site->index()`), especially if your site has thousands of pages and files. Always start with the smallest "base" collection possible and use caching.
</warning>

<info>
For often used collections, check out (link: docs/guide/templates/collections text: Kirby collections).
</info>

## Filtering by listed/unlisted

In Kirby, pages can be either listed (folder with prepended number/date) or unlisted. Kirby has two handy built-in methods to filter pages according to their status:

```php
$collection = page('projects')->children()->listed();
$collection = page('projects')->children()->unlisted();
```

## Filter page collections by a single field

Often, you only want to display all pages that have a certain value in a special field, e.g. a category or a tags field. For this task, you can use the `filterBy()` method:

```php
// filter a collection by a value in a single value field
$collection = page('projects')
  ->children()
  ->filterBy('category', 'webdesign');

// filter a collection by a value in a field with a comma separated list of values
$collection = page('projects')
  ->children()
  ->filterBy('tags', 'webdesign', ',');
```
Note the use of the delimiter in the second example to get a value from a comma separated list. If you use other delimiters in your fields, you can, of course, change the delimiter.

## Filtering using filter operators

With the above example, you only get results that fit a single value. You can fine tune your filter results by using the operator parameter in the `filterBy()` method:

### Pages

```php
// get all pages with a date after now
$collection = page('blog')
  ->children()
  ->filter(function ($child) {
    return $child->date()->toDate() > time();
  });

// get all pages with a title that starts with "A" or a number
$collection = page('blog')
  ->children()
  ->filterBy('title', '<', 'B');
```

## Simple related pages

To fetch all sibling pages that share one or more tags stored in a comma separated list, you can use the `in` filter operator like this:

```php
$relatedSiblings = $page->siblings(false)->filterBy('tags', 'in', $page->tags()->split(','), ',');
```

To fetch related pages that have at least two tags in common, we can use the `filter()` method instead:

```php
$relatedSiblings = $page->siblings(false)->filter(function($sibling) use ($page) {
  return count(array_intersect($sibling->tags()->split(','), $page->tags()->split(','))) >= 2;
});
```

### Files

```php
// get all images that contain a string
$images = page('blog')
  ->images()
  ->filterBy('filename', '*=', 'cover-');

// get all file types exept images
$files = page('blog')
  ->files()
  ->filterBy('type', '!=', 'image');
```

#### Available filter methods

(docs: filters)


## Filtering by methods

You cannot only filter by custom field methods in your content files but also by methods of a pages', files', users' collection. Here are some examples:

### Pages

```php
// filter by page template
$collection = page('projects')
  ->children()
  ->filterBy('template', 'article');

// filter by intended template
$collection = page('projects')
  ->children()
  ->filterBy('intendedTemplate', 'article');

// filter by depth
$collection = $site
  ->index()
  ->filterBy('depth', 2);

// filter by modified date
$collection = $site
  ->index()
  ->filterBy('modified', '>', strtotime('2018-04-30'));
```

### Files

```php
// filter by file extension
$images = $page
  ->images()
  ->filterBy('extension', 'png');

// filter by type
$files = $page
  ->files()
  ->filterBy('type', 'document');
```
### Users

```php
// filter by role
$users = $kirby
  ->users()
  ->filterBy('role', 'editor');
```

## Filter collections by more than one field/method

You can also string together multiple `filterBy()` methods to narrow down your filter results (using AND logic):

### Pages

```php
// fetch all events with a template that is neither "concert" nor "exhibition"
$collection = page('events')
  ->children()
  ->filterBy('template', '!=', 'concert')
  ->filterBy('template', '!=', 'exhibition');
```

You can achieve the same with the `filter($callback)` method:

```php
$collection = page('events')
  ->children()
  ->filter(function ($p) {
    return $p->template() != 'concert' && $p->template() != 'exhibition';
  });
```

Or you can use the `not in` filter:

```php
// fetch all events with a template that is neither "concert" nor "exhibition"
$collection = page('events')
  ->children()
  ->filterBy('template', 'not in', ['concert', 'exhibition']);
```
### Files

```php
// fetch all files that are neither videos nor images
$files = $page
  ->files()
  ->filterBy('type', '!=', 'video')
  ->filterBy('type', '!=', 'image');
```

### Users

```php
// fetch all users that are neither admins nor editors
$files = $kirby
  ->users()
  ->filterBy('role', '!=', 'admin')
  ->filterBy('role', '!=', 'editor');
```

## Fun with filtering by date

### Filtering from - to

<info>
The `date ...` filters were added in Kirby 3.4.0.
</info>

For a simple from - to filtering of dates, you can string together two `filterBy()` methods as seen above:

```php
// fetch all blog post of 2018 using beginning and end dates
$collection = page('blog')
  ->children()
  ->filterBy('date', 'date >', '2018-01-01')
  ->filterBy('date', 'date <', '2018-12-31');
```

If you have a date field but want to filter by year, you can use a filter with a callback:

```php
$year     = date('Y');
$articles = page('blog')
  ->children()
  ->filter(function ($page) use ($year) {
    return $page->date()->toDate('Y') === $year;
  });
```

### Multiple date fields

Events often have `startdate` and `enddate` date fields. To filter events that either end or begin in the future, you can use a filter with a callback:

```php
$events = page('events')
  ->children()
  ->filter(function ($child) {
    return $child->startdate()->toDate() > time() || $child->enddate()->toDate() > time();
  });
```

With two little changes to the above code, you can fetch all current events, that is events that have already started but not ended yet:

```php
$events = page('events')
  ->children()
  ->filter(function ($child) {
    return $child->startdate()->toDate() > time() && $child->enddate()->toDate() < time();
  });

```
## Filtering by the `pages`, `files` or `users` field

The (link: docs/reference/panel/fields/pages text: `pages`), (link: docs/reference/panel/fields/files text: `files`) and (link: docs/reference/panel/fields/users text: `users`) fields store their content in `yaml` format. Also, these fields can contain one or multiple entries. Using the simple `filterby()` method is therefore not useful to filter a collection by these field types and we have to use the [`filter()`](/docs/reference/objects/pages/filter) method.

Let's first understand what these fields store in the content files:

- The `pages` field stores a single or multiple (link: docs/reference/objects/page/id text: page ids)
- The `files` field stores a single or multiple (link: docs/reference/objects/file/id text: file ids)
- The `users` field stores a single or multiple (link: docs/reference/objects/user/email text: user emails)

Now We can  use this information to filter pages or other collections by content stored in these fields.

### Examples

#### Filter by `pages` field

For example, fetch all pages in a collection that reference the current page (or any other page) in the `related` field:

```php
$page->children()->filter(function($child) use($page) {
    return $child->related()->toPages()->has($page);
});
```

#### Filter by `files` field

For example, fetch all pages in a collection that reference a given file in the `pictures` field:

```php
$file = $page->images()->first();
$page->children()->filter(function($child) use($file){
    return $child->pictures()->toFiles()->has($file);
});
```

#### Filter by `users` field

For example, fetch all pages in a collection that reference the current user in the `authors`field:

```php
$user = $kirby->user();
$page->children()->filter(function($child) use($user) {
    return $child->authors()->toUsers()->has($user);
});
```

<info>
While these examples showcase pages collections, the same syntax can be applied to filtering files or users that contain any of these fields.
</info>


## Filtering using the search method

Another option of filtering collections is by using the `search()` method. There is another cookbook recipe on (link: ./search text: how to add a search to your site).
