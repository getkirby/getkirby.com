Title: My first Panel section

----

Description: Let's build a custom Panel section

----

Published: 2019-11-24

----

Text:

In this recipe, we will create a custom Panel section that displays a list of Kirby links with an icon, a title and a description. This is what it will look like once we are ready:

(screenshot: custom-section.jpg)


<info>
For the purposes of this recipe, we assume that Parcel is already installed globally as described in the (link: docs/guide/plugins/plugin-setup-panel text: Panel plugin setup guide).

You can install the (link: https://github.com/getkirby/pluginkit/tree/4-panel text: Pluginkit) as a basis or create the file structure we need manually, that's up to you. Also, it doesn't matter if you use the Plainkit or the Starterkit as a starting point.
</info>

## Getting started

Please read the (link: docs/reference/plugins/extensions/sections text: chapter about custom sections in the reference) before starting with this example.

Let's get started with the plugin folder, we'll call it `/startersection`. Inside this folder, we create a `package.json` file which is needed so that Parcel knows what to do.

```json "/site/plugins/startersection/package.json"
{
  "scripts": {
    "dev": "parcel watch src/index.js --no-source-maps -d ./",
    "build": "parcel build src/index.js --no-source-maps --experimental-scope-hoisting -d ./"
  },
  "posthtml": {
    "recognizeSelfClosing": true
  }
}
```
This will take care of compiling our source files into an `index.js` file in the root of our `startersection` plugin folder.

## Register the section: PHP part

We also need an `index.php` file that contains the Kirby plugin wrapper, in which we define the section. The section definition itself goes into a separate file, which we will put into a separate `/lib` folder and require from there. 

```php "/site/plugins/startersection/index.php"
Kirby::plugin('getkirby/startersection', [
    'sections' => [
        'startersection' => require_once __DIR__ . '/lib/startersection.php',
    ],
]);
```
<info>
Note that while we could put the props array we now outsource to `startersection.php` into our `index.php`, the purpose here is to get an idea how we can structure our files in more complex plugins. 
</info>

Inside `startersection.php`, we set the section's properties. We keep it simple and only set a headline, a layout and a data property. These are the properties we can later define in the blueprint for the section.

```php "/site/plugins/startersection/lib/startersection.php"
return [
    'props' => [
        'headline' => function ($headline = 'Getting started') {
            return $headline;
        },
        'layout' => function ($layout = 'list') {
            return $layout;
        },
        'data' => function($data = []) {
          return $data;
        }
    ]
];
```

## Register the section: Vue part

Our new section also needs an `index.js` in which we register the section for the Vue part of the plugin.

```js "/site/plugins/startersection/src/index.js"
import Startersection from "./components/Startersection.vue";

panel.plugin("getkirby/startersection", {
  sections: {
    startersection: Startersection
  }
});
```

Inside this file, we import the `Startersection.vue` component and assign this component to the `startersection` section.

## Set up section component

Finally, we need the `Startersection.vue` component that contains the template and data for the section.

```html "/site/plugins/startersection/src/components/Startersection.vue"
<template>

</template>

<script>
export default {
  data: function() {
    return {
     
    }
  }
};
</script>
```

At this point, we are ready to run…

```
npm run dev
```

…in the `startersection` folder to compile our code into the main `index.js`.

## Set up section in blueprint

If this went smoothly, we are ready to use the section in a blueprint, e.g. `site.yml`:

```yaml "/site/blueprints/site.yml"
sections:
  startersection:
    type: startersection
    headline: Getting started
```

If we now open the Panel start page, we will not see anything yet in the browser. However, on inspecting the source code, there will be an empty `div` tag with a class of `k-section k-section-name-startersection`. Hurray!

## Adding the missing pieces

Back to `Startersection.vue`. We now define the same properties that we already defined in `index.php` inside the data function of the `export`object:

```html "/site/plugins/startersection/src/components/Startersection.vue"
<script>
export default {
  data: function() {
    return {
     headline: null,
     layout: null,
     data: []
    }
  }
};
</script>
```

As a next step, we finalize our template, so it can later display the data:

```html "/site/plugins/startersection/src/components/Startersection.vue"
<template>
  <k-section class="k-startersection-section">
    <header class="k-section-header">
      <h2 class="k-headline">{{ headline }}</h2>
    </header>
    <k-collection
      :items="data"
      :layout="layout"
    />
  </k-section>
</template>
```

Kirby makes this really easy for us by providing default components we can reuse all over the place. Here we use the `k-section` component, a header and the `k-collection` component. The `k-collection` components makes it easy to switch between the cards and list layouts. All we have to do is bind our data to the `:items` property and our `layout` to the `:layout` property.

Still, nothing to see in the Panel.

## Manually adding some data

We can now quickly add some default data to our properties so that we finally get something to see in the Panel:

```html "/site/plugins/startersection/src/components/Startersection.vue"
<script>
export default {
  data: function() {
    return {
     headline: "Getting started,
     layout: "list",
      data: [
        {
          icon: {
            type: "document",
            back: "black"
          },
          text: "Guide",
          link: "https://getkirby.com/docs/guide",
          info: "Get an overview of all the cool things you can do with Kirby",
          target: "blank",
        }
      ]
    }
  }
};
</script>
```

Inside the data array, we use the keywords the `k-collection` component expects, and add a value to each. Et voilà, there is our first section entry in the Panel.

## Fetching the data from the backend

The bit that is left to do, is to load the data from the backend and let it replace the default values. We do that within the `created` hook that is triggered when the component is ready, using the `load()` method . When we get a response, we assign the values to our properties.

```html "/site/plugins/startersection/src/components/Startersection.vue"
<script>
export default {
  data: function() {
    return {
      headline: "Getting Started",
      layout: "cards",
      data: [
        {
          icon: {
            type: "document",
            back: "black"
          },
          text: "Guide",
          link: "https://getkirby.com/docs/guide",
          info: "Get an overview of all the cool things you can do with Kirby",
          target: "blank",
        }
      ]
    }
  },
  created: function() {
    this.load().then(response => {
      this.headline = response.headline;
      this.layout = response.layout;
      this.data = response.data;

    });
  }
};
</script>
```

## The blueprint with the final section definition

Finally, let's add the data we want to show in the section to the section definition:

```yaml
sections:
  startersection:
    type: startersection
    headline: Getting started
    layout: cards
    data:
      -
        icon:
            type: document
            back: black
        link: 'https://getkirby.com/docs/guide'
        target: _blank
        text: Guide
        info: Get an overview of all the cool things you can do with Kirby

      -
        icon:
            type: book
            back: black
        link: 'https://getkirby.com/docs/cookbook'
        target: _blank
        text: Cookbook
        info: Yummy step by step recipes for all sorts of usage tastes

      -
        icon:
            type: list-bullet
            back: black
        link: 'https://getkirby.com/docs/reference'
        target: _blank
        text: Referenz
        info: Discover Kirby's API in all detail

      -
        icon:
            type: cog
            back: black
        link: 'https://getkirby.com/plugins'
        target: _blank
        text: Plugins
        info: Find plugins to extend Kirby's core functionality and make the most of your site
      -
        icon:
            type: user
            back: black
        link: 'https://forum.getkirby.com'
        target: _blank
        text: Forum
        info: Meet Kirby\'s lovely community and get help whenever you get stuck
```

As a last step, we can clean up `Startersection.vue` and remove the default values again, so that they look like in (link: docs/cookbook/extensions/first-panel-section#adding-the-missing-pieces text: step 6) again.

Change the layout to `list` in the blueprint to see how your section is now displayed as a list.


## Building the plugin

Once you are happy with your plugin, you can create minified and optimized versions of the `index.js` and `index.css` (if you have added custom styles) with…

```
npm run build
```

## Final folder structure

```filesystem
startersection/
  index.js
  package.json
  lib/
    startersection.php
  src/
    index.js
    components/
      Startersection.vue
```

## Variation: Fetching the content from a structure field



## Where to go from here

This is a very basic example that should still have given you an understanding of how the different parts play together and enable you to set up your first custom sections for your clients. The data to fill this section can come in fact come from anywhere, you can provide it through a route, a database or whatever you see fit. And you probably don't just want to display stuff, but add actions to each item etc. We'll cover that in a future recipe.

You don't have to use the components Kirby provides, either, but can come up with your own markup.
