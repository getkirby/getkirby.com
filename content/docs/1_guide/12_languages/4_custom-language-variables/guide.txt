Title: Custom language variables

----

Description: Define translatable variables, which can be used to translate fixed strings in your templates like buttons, form labels etc.

----

Intro: When working with a multi-language site, you often need language-specific variables/strings. Simple things like translated button labels for your contact form, for example, or other translatable parts which don't need to be modified by editors. For such cases, Kirby has a built-in language variable management.

----

Text:

## Where to store language variables

Language variables can be stored in two places in Kirby:

1. As an array of key/value pairs in your language definition files in `/site/languages`
2. As an array of key/value pairs in a plugin using the (link: docs/reference/plugins/extensions/translations text: `translations` extension)

Those arrays can contain as many custom variables as you need.


## Manually adding translations in language definition files

```php "/site/languages/en.php"
<?php

return [
  'code' => 'en',
  'default' => true,
  'direction' => 'ltr',
  'locale' => 'en',
  'name' => 'English',
  'url' => '/',
  'translations' => [
    'change' => 'Change',
    'confirm' => 'OK',
    'copy' => 'Copy',
    'create' => 'Create'
  ]
];
```

```php "/site/languages/de.php"
<?php

return [
  'code' => 'de',
  'default' => false,
  'direction' => 'ltr',
  'locale' => 'de_DE',
  'name' => 'Deutsch',
  'translations' => [
    'change' => 'Ã„ndern',
    'confirm' => 'OK',
    'copy' => 'Kopieren',
    'create' => 'Erstellen'
  ]
];
```
<since v="4.0.0">
## Language editor in the Panel

Once you have added one or more languages, you can start adding translation variables via the Language editor. Visit the language you want to edit. You can now add language variables as key/value pairs. These variables will also be stored in the language definition files.

(image: language.png)

Access to the language editor can be restricted via (link:/docs/guide/users/permissions text:permissions)

<info>
Language variables that you add in other languages than the default language will be stored in the default language as well. Language variables added in the default language will only be stored once translated.
</info>

If you stored your language variables in separate files as described in (link: docs/quicktips/language-variables text: this cookbook recipe) they will be read by the Panel, but then moved to the language definition files.

**Core translation variables and translation variables from plugins are ignored and cannot be overwritten via the Panel.**
</since>

## Using language variables in your template

Those translated variables can be fetched in your template, plugins or snippets with the `t()` helper:

```php
<input type="submit" value="<?php echo t('change') ?>" />
```

You can provide a fallback if the language variable is not defined:


```php
<input type="submit" value="<?php echo t('change', 'Change') ?>" />
```

## More information

Check out the following cookbook recipes to find out how to make language variables more flexible:

- (link: docs/quicktips/language-variables text: Flexible language variables)
- (link: docs/quicktips/using-variables-in-language-strings text: Using placeholders in language strings)
