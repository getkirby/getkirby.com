Title: Color

----

Since: 4.0.0

----

Intro: The `color` field supports multiple color notations, a color picker, pre-defined colors, custom color names, and transparency.

----

Text:

(image: color.png)

## Field properties

(field-options: color)

## Usage

```yaml
color:
  type: color
  format: hsl # supports hex (default), rgb, hsl
```


### In templates/snippets

```php
<?= $page->color()->escape('css') ?>
```

## Alpha

Use the `alpha` option (default: false) to activate alpha transparency support:

```yaml
color:
  type: color
  alpha: true
```

## Modes

With the `mode` option you control which elements of the color field are available. Possible values:

| Option   | Description |
| ------   | ----------- |
|`picker`  | show everything (default)|
|`input`   | show only the input |
|`options` | show only options |

(image: color-field-modes.png)


## Options

### Pre-defined options

Allows adding a list of pre-defined colors that are shown as one-click options in the Panel.


```yaml
color:
  type: color
  options:
    - "#f8b195"
    - "#f67280"
    - "#c06c84"
    - "#6c5b7b"
    - "#355c7d"
```

(image: color-field-options.png)

If you name the colors, their name is shown in the Panel as well.

```yaml
color:
  type: color
  options:
    "#F8B195": "Sunny rays"
    "#F67280": "First-love blush"
    "#C06C84": "Cherry blossom"
    "#6C5B7B": "Morning gloom"
    "#355C7D": "Midnight rain"
```

(image: color-field-names.png)

<since v="4.1.0">
### Dynamic options

Our options (link: docs/guide/blueprints/query-language text: query syntax) offers a powerful way of adding automatically generated option lists to a color field.


```yaml
myColorField:
  type: color
  options:
    type: query
    query: kirby.option('my.colors')
```

The example above will get the color options from the `my.colors` config entry, which could look like:

```php "site/config/config.php"
// only values
return [
	'my' => [
		'colors' => [
			'#3e3e3e',
			'#aaa',
			'#ddd',
		]
	]
];

// values -> labels
return [
	'my' => [
		'colors' => [
			'#3e3e3e' => 'Color A',
			'#aaa'    => 'Color B',
			'#ddd'    => 'Color C',
		]
	]
];
```

You can start at the `site`, current `page`, `users` collection, or the `kirby` instance to run your query.

#### Custom value and label

To customize the stored value and displayed label, you can be more specific when defining the query: `text` and `value` can be defined with the help of our string template language to get exactly what you want as the result.

```yaml
myColorField:
  type: color
  options:
    type: query
    query: kirby.option('my.colors')
    text: "{{ item.name }}"
    value: "{{ item.hex }}"
```

```php "site/config/config.php"
return [
	'my' => [
		'colors' => [
			[
				'name' => 'Color A',
				'hex'   => '#3e3e3e',
			],
			[
				'name' => 'Color B',
				'hex'   => '#aaa',
			],
			[
				'name' => 'Color C',
				'hex'   => '#ddd',
			]
		]
	]
];
```

### Options via API

If the option queries are not enough or you need to pluck an external source for option data, you can use the API type.

```yaml
myColorField:
  type: color
  options:
    type: api
    url: https://your-options-api.com/colors.json
```

By default, the API type expects that the JSON endpoint returns an option array like this:

```js
{
	"#3e3e3e": "Color A",
	"#aaa": "Color B",
	"#ddd": "Color C"
}
```
</since>

