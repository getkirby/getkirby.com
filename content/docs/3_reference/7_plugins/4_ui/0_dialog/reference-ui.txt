Text:

## Examples 

### Simple

By default, the dialog component is coming with cancel and submit buttons in the footer. You can control those with the dialog props.

```html
<k-button @click="$refs.dialog.open()">Open Dialog</k-button>

<k-dialog
  ref="dialog"
  button="Delete"
  theme="negative"
  icon="trash"
>
  <k-text>
    Do you really want to delete the user:<br>
    <strong>bastian</strong>?
  </k-text>
</k-dialog>
```

### Detailed

If you need more control over the available buttons in the footer, or you want to create a dialog without buttons, you can overwrite the footer slot.

```html
<k-button @click="$refs.dialog.open()">Open Dialog</k-button>

<k-dialog ref="dialog">
  <template>
    <k-text>
      Do you really want to delete the user:<br>
      <strong>bastian</strong>?
    </k-text>
  </template>

  <template slot="footer">
    <k-button-group>
      <k-button icon="times" @click="$refs.dialog.close()">Cancel</k-button>
      <k-button icon="trash" theme="negative" @click="$refs.dialog.close()">Delete</k-button>
    </k-button-group>
  </template>
</k-dialog>
```

### Forms in dialogs

A dialog can easily be combined with a form by using the `k-form` component. It's important though to setup the submit events correctly.

```html
<template>
  <k-dialog ref="dialog" @submit="$refs.form.submit()">
    <k-form
      ref="form"
      v-model="page"
      :fields="{
        title: {
          label: 'Title',
          type: 'title'
        }
      }"
      @submit="submit"
    />
  </k-dialog>
</template>

<script>
export default {
  data() {
    return {
      page: {
        title: null
      }
    }
  },
  methods: {
    submit() {
      this.$api
        .patch('/some/endpoint', { title: this.page.title })
        .then(() => {
          this.$refs.dialog.close();
        })
        .catch(() => {
          this.error("The title could not be saved");
        });
    }
  }
}
</script>
```
As you can see in the example, the `@submit` event of the dialog is used to trigger the `submit()` method of the form. The `@submit` event of the form is then used to actually trigger the defined submit method.

In the submit method the API call is done. On success, the dialog will be closed, while `catch()` will take care of showing the error notification bar in the dialog and keep it open.

By setting up the dialog and form like this, you can make sure that the ok button and any submit events within the form (i.e. enter key) are doing the same.
