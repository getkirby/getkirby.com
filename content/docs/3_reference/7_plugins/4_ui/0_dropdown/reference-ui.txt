Text:

<info>
Make sure to check out `<k-dropdown-content>` and `<k-dropdown-item>`.
</info>

## Example

```html
<k-dropdown-tem>
  <k-button @click="$refs.dropdown.toggle()">Menu</k-button>
  <k-dropdown-content ref="dropdown">
    <k-dropdown-item>Option A</k-dropdown-item>
    <k-dropdown-item>Option B</k-dropdown-item>
    <k-dropdown-item>Option C</k-dropdown-item>
  </k-dropdown-content>
</k-dropdown-tem>
```

## Items

### as array

Instead of adding `k-dropdown-item` elements manually, you can also inject them with an array

```html
<k-dropdown>
  <k-button @click="$refs.dropdown.toggle()">Menu</k-button>
  <k-dropdown-content
    ref="dropdown"
    :options="[
      {icon: 'edit', text: 'Option A', click: clickHandler},
      {icon: 'cog', text: 'Option B', click: clickHandler},
      {icon: 'trash', text: 'Option C', click: clickHandler}
    ]"
  />
</k-dropdown>
```

### Dynamic from an async function (e.g. API call)

The item array can also be returned in an options handler to dynamically load options

```html
<template>
  <k-dropdown>
    <k-button @click="$refs.dropdown.toggle()">Menu</k-button>
    <k-dropdown-content ref="dropdown" :options="fetchOptions" />
  </k-dropdown>
</template>

<script>
export default {
  methods: {
    fetchOptions() {
      return (ready) => {
        this.$api.get("/some/options").then(options => {
          ready(options);
        });
      };
    }
  }
}
</script>
```

### From an JSON API endpoint

Dropdown items can also be fetched from a JSON endpoint:

```html
<k-dropdown>
  <k-button @click="$refs.dropdown.toggle()">Menu</k-button>
  <k-dropdown-content ref="dropdown" options="/api/options.json" />
</k-dropdown>
```

This will fetch the options only as soon as the dropdown will be opened.

----

CSS:

`.k-dropdown`
`.k-dropdown-content`
`.k-dropdown-item`
