Text: 

## Examples

```php
$data = [
  'username' => 'Homer',
  'fname'    => 'Homer',
  'lname'    => 'Simpson',
  'email'    => 'home@simpsonscom',
  'gender'   => 'male'
];

$rules = [
  'username' => array('required'),
  'fname'    => array('required', 'minLength' => 3),
  'lname'    => array('required', 'maxLength' => 30),
  'email'    => array('required', 'email'),
  'gender'   => array('in', array(array('male', 'female', 'non-binary', 'not specified')))
];

$messages = [
  'fname' => 'Please enter a valid first name',
  'lname' => 'Please enter a valid last name',
  'email' => 'Please enter a valid email address'
];

if($invalid = invalid($data, $rules, $messages)) {
  dump($invalid);
} else {
  dump('Nice data!');
}
```

You can change these rules based on the type of data you want to obtain and use (link: docs/reference/system/validators text: Kirby's validators) or your own (link: docs/reference/plugins/extensions/validators text: custom validators).

The syntax for the `$rules` array supports the following variants:

- To use a validator without parameters, use the validator name as the array value: `array('required')`
- To pass additional parameters to a validator, use the validator's name as the array key, and the parameter(s) as the value.
  - Scalar values can be passed directly: `array('maxLength' => 20)`
  - You can pass multiple parameters to the validator as an array: `array('between' => array(10, 100))`
  - To pass an array as a single parameter, use a nested array: `array('in' => array(array('foo', 'bar')))`

You can also separately define a message for each validation rule:

```php
$messages = [
  'fname' => 'Please enter a valid first name',
  'lname' => 'Please enter a valid last name',
  'email' => [
    'Please enter an email address',
    'The email address is invalid'
  ]
];
```

You can find an example of `invalid()` used to create pages from frontend in (link: https://getkirby.com/docs/cookbook/forms/creating-pages-from-frontend text: this recipe).
