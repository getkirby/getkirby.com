Title: Slug

----

Intro:

A slug input field

----

Guide: blueprints/fields

----

Text:

The slug field creates a text input that automatically sanitizes the typed value with our built-in sluggify method. It's perfect if you want to create IDs or class names for HTML elements or paths for files or URLs.

(image: slug.png)

## Example

```yaml
fields:
  className:
    label: Class
    type: slug
```

## Field properties

(field-options: slug)

## Sync option

You can sync the slug field with another field. Whenever the editor types something into the synced field, the slug field will update with a sluggified version of the input:

```yaml
fields:
  className:
    label: Class Name
    type: slug
    sync: title
```
<info>
Please note that when your field to sync uses camelCase, you still have to reference the field with all lowercase letters:

```yaml
fields:
  sectionHeadline:
    type: text
  id:
    label: Id
    type: slug
    sync: sectionheadline
```

The same applies for the `wizard` option below.
</info>

## Wizard option

If you don't want to automatically sync the slug field with the other field, you can also to do this manually when you click a button. The `wizard` option accepts a `field` to sync with and a `text` attribute for the button text.

```yaml
fields:
  identifier:
    label: Identifier
    type: slug
    wizard:
      field: input
      text: Generate!
```

(image: slug-field-wizard-option.png)

## Allow option

By default, the slug field will strip out or replace any non-alphabetic, non-numeric character with a simple dash. You can define additional allowed characters with the allow option:

```yaml
fields:
  className:
    label: Class Name
    type: slug
    sync: title
    allow: _
```

<info>
The slug field also works within blocks or structure field items to sync fields within a block/structure field item.
```yaml
fields:
  structure:
  type: structure
  fields:
    text:
      type: text
    slug:
      type: slug
      sync: text
</info>


## How to use in templates/snippets

```php
<div class="<?= $page->className() ?>">
	<!-- -->
</div>
```