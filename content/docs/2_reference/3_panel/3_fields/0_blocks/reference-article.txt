Title: Blocks

----

Intro:

A visual editor for long-form text and modular pages

----

Guide: page-builder

----

Text:

The Blocks field is the perfect solution for complex single-column layouts and long-form text.

(image: blocks.png)

## Blueprint setup

You can add the Blocks field to any fields section in your Panel like this:

```yaml
fields:
  text:
    type: blocks
```

## Field properties

Property | Type | Default | Description
- | - | - | - |
autofocus | `bool` | - | Sets the focus on this field when the form loads. Only the first field with this property gets focus.
default | `array` | - | Default value for the field, which will be used when a page/file/user is created
disabled | `bool` | - | If true, the field is no longer editable and will not be saved
empty | `string` | - | Customize the default text when the blocks field is empty
fieldsets | `array` | - | Defines the allowed block types in the blocks field. See below.
help | | - | Optional help text below the field
label | | - | The field label can be set as string or associative array with translations
max | `int` | - | Maximum number of allowed blocks
min | `int` | - | Minimum number of required blocks
pretty | `bool` | `false` | Saves pretty printed JSON in text files
required | `bool` | `false` | If true, the field has to be filled in correctly to be saved.
translate | `bool` | `true` | If false, the field will be disabled in non-default languages and cannot be translated. This is only relevant in multi-language setups.
when |  | - | Conditions when the field will be shown
width | `string` | `1/1` | The width of the field in the field grid. Available widths: `1/1`, `1/2`, `1/3`, `1/4`, `2/3`, `3/4`

## Defining Fieldsets

By default, the block selector shows a single list of available block types in alphabetical order.

```yaml
fields:
  text:
    type: blocks
```

(image: single.png)

However, you can fully customize the selector for new block types with sorted block types and groups.

To change the order of available blocks, list them manually with the `fieldsets` option:

```yaml
fields:
  text:
    type: blocks
    fieldsets:
      - heading
      - text
      - list
      - image
      - gallery
      - video
      - code
      - markdown
```

(image: single-sorted.png)

### Groups

You can group block types in the block selector for a better overview of the available options. This is particularly useful when your blocks lists gets longer once your start creating your own custom blocks.

To create such groups, use the Blocks field's generic "group" block type:

```yaml
fields:
  text:
    type: blocks
    fieldsets:
      text:
        label: Text
        type: group
        fieldsets:
          - heading
          - text
          - list
      media:
        label: Media
        type: group
        fieldsets:
          - image
          - video
      code:
        label: Code
        type: group
        fieldsets:
          - code
          - markdown
```

(image: groups.png)

### Closed groups

By default, all groups are open. With very long list, you might want to close groups of blocks that are used less frequently with the `open: false` option:

```yaml
fields:
  text:
    type: blocks
    fieldsets:
      text:
        label: Text
        type: group
        fieldsets:
          - heading
          - text
          - list
      media:
        label: Media
        type: group
        fieldsets:
          - image
          - video
      code:
        label: Code
        type: group
        open: false
        fieldsets:
          - code
          - markdown
```

(image: closed-groups.png)

## Default values

You can set default blocks/values for blocks fields which will prepopulate the field using the `default` prop. The `type` property is required, but default blocks can be empty or filled with example content.

### Empty default block

```yaml
fields:
  text:
    type: blocks
    default:
      - type: text
```

### Default block with content

```yaml
fields:
  text:
    type: blocks
    default:
      - type: text
        content:
          text: Write something great…
```

### Multiple block types

You can also set multiple default block entries:

```yaml
fields:
  text:
    type: blocks
    default:
      - type: heading
        content:
          level: h2
          text: A heading
      - type: text
        content:
          text: Write something great…
```
## Block types

(reference: panel/blocks)

## Custom block types

Kirby's built-in blocktypes are not enough? Create your own! Check out our extensive documentation on custom block types, from basic to advanced:

- (link: docs/guide/page-builder/block-basics text: Modifying blocks types and custom blocks)
- (link: docs/reference/plugins/extensions/blocks text: Custom block types)
- (link: docs/guide/page-builder/custom-block-type text: Creating a custom block type from scratch)
- (link: docs/guide/page-builder/block-examples text: Block factory: Creating your own blocks collection)
- (link: docs/cookbook/content-structure/nested-blocks text: Nested blocks)

<since v="4.0.0">
## Block preview type `fields`

Instead of manually creating previews for blocks types, you can use the `fields` preview type to display the fields together with their content.

(image: field-preview.png)

```yaml
fields:
  blocks:
    type: blocks
    fieldsets:
      demo:
        wysiwyg: true
        preview: fields
        tabs:
          main:
            fields:
              title:
                type: text
              subtitle:
                type: text
              description:
                type: writer
          settings:
            label: Settings
            fields: # ...
```
</since>
## Extending core blocks

From modifying the output to how they are previewed in the Panel, you can also overwrite Kirby's built-in block types:

- (link: docs/guide/page-builder/block-basics#extending-core-blocks text: Extending core blocks)
- (link: https://getkirby.com/docs/reference/panel/blocks text: Block types)

(docs: blocks/blocks)

## Configuration

You can configure the default setup of your Blocks field in your config.php

```php "/site/config/config.php"
<?php

return [
  'blocks' => [
    'fieldsets' => [
      'text' => [
        'label' => 'Text',
        'type' => 'group',
        'fieldsets' => [
          'text',
          'heading'
        ]
      ],
      'media' => [
        'label' => 'Media',
        'type' => 'group',
        'fieldsets' => [
          'image',
          'video'
        ]
      ]
    ]
  ]
];
```

## Further reading

- (link: https://getkirby.com/docs/reference/panel/blocks text: Block types)
- (link: docs/reference/objects/cms/block text: Block methods)
- (link: docs/reference/objects/cms/blocks text: Blocks collection methods)
