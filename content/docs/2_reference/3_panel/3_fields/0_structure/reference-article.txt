Title: Structure

----

Intro:

Structured data input, which stores data as YAML.

----

Guide: blueprints/fields

----

Text:

The structure field makes it possible to add multiple complex entries to a field, which will be stored as (glossary: YAML). A typical use case would be a list of addresses, team members or a restaurant menu.

(image: structure.png)

## Example

```yaml
fields:
  addresses:
    label: Addresses
    type: structure
    fields:
      street:
        label: Street
        type: text
      zip:
        label: ZIP
        type: text
      city:
        label: City
        type: text
```

Such a structure will be stored in the content file like this:

```yaml
addresses:
-
  street: Rue de WTF 17
  zip:    1112
  city:   Monaco
-
  street: 1212 Broadway
  zip:    4321
  city:   New York
-
  street: At the beach
  zip:    9999
  city:   The capitol of the Bahamas
```

If you need to store a single object instead of a list of objects, take a look at the (link: docs/reference/panel/fields/object text: object field).

## Field properties

(field-options: structure)

## Fields

You can define any number of fields and use the same (link: docs/reference/panel/fields text: field types listed):

(reference: panel/fields)

<info>
Each field value is stored like in a normal Kirby content file. This means that all field types are supported, however all of their values are converted to strings. For most fields there is no difference, but fields with structured data will *not* be nested inside the same YAML data structure. This ensures broad compatibility.
</info>

## Default values

You can set default values for structure fields which will prepopulate the field:

```yaml
fields:
  emails:
    label: Emails
    type: structure
    default:
      - email: bastian@getkirby.com
      - email: lukas@getkirby.com
      - email: nico@getkirby.com
      - email: sonja@getkirby.com
    fields:
      email:
        label: Email
        type: email
```

## Table columns

You can define the columns that are shown in the table. This is especially useful if you have a lot of fields in your structure and you don't want to show them all on first sight, but still keep them editable. Columns can also change the text alignment, set a custom width and define a before and after text that will be prepended or appended to the value.

| Option | Value | Description |
|--------|-------|-------------|
| `width`| `1/2`, `1/3`, `1/4`, `2/3`, `3/4` (any fraction since v3.2.0)| Set width of column
| `align` | `left`, `center`, `right` | Set text alignment
| `before`| `string` | Set text to prepend value
| `after` | `string` | Set text to append value
| `mobile` | `true` | Set visible in mobile view

### Example

```yaml
fields:
	holidays:
		type: structure
		columns:
			title:
				width: 1/4
			images:
				width: 1/2
			price:
				width: 1/4
				align: right
				after: "USD"
		fields:
			title:
				type: text
			images:
				type: files
			description:
				type: textarea
			price:
				type: number
```

Structure columns can be set to any fraction and will be automatically calculated into the right width.

```yaml
fields:
  mystructure:
    label: Structure
    type: structure
    columns:
      title:
        width: 3/5
      images:
        width: 1/5
      price:
        width: 1/10
    fields:
      title:
        label: A
        type: text
      images:
        label: B
        type: text
      price:
        label: C
        type: text
```

You can also define columns without additional options if you want to use the defaults. You can still combine this with options for other columns:

```yaml
fields:
	holidays:
		type: structure
		columns:
			title: true
			images: true
			price:
				align: right
				after: "USD"
		fields:
			title:
				type: text
			images:
				type: files
			description:
				type: textarea
			price:
				type: number
```

### Hide toggle field text in preview

When using toggle fields within structures, displaying the field's text in the preview can sometimes look cluttered. You can hide the text with the `text` option in the columns' definition.

```yaml
fields:
  structure:
    columns:
      a:
        text: false
      b:
        text: false
    fields:
      a:
        type: toggle
      b:
        type: toggle
        text: this is some long text
```

### Set columns to visible on mobile

The `mobile` option keeps cells in responsive views. If none of the columns are set to `mobile`, only the first column will be visible on mobile.

```yaml
fields:
  structure:
    columns:
      image:
        type: image
      title:
        type: text
        mobile: true
      date:
        type: date
        mobile: true
    fields:
      image:
        type: files
      title:
        type: text
      date:
        type: date
```

## Preview of fields in the table

The structure field tries to create the best possible preview for the field in its table view. If you are using fields provided by a plugin in the structure field, the preview of these can be customized with a (link: docs/reference/plugins/extensions/field-previews text: field preview extension).

## How to use in templates/snippets

To access a structure field in your templates, you can use the [`yaml()`](/docs/reference/templates/field-methods/yaml) and [`toStructure()`](/docs/reference/templates/field-methods/to-structure) methods.

Let's say we wanted to render the `holidays` structure field example from above in a template:

```php
<?php
// using the `toStructure()` method, we create a structure collection
$items = $page->holidays()->toStructure();
// we can then loop through the entries and render the individual fields
foreach ($items as $item): ?>
  <h2><?= $item->title()->html() ?></h2>
  <?php foreach ($item->images()->toFiles() as $image): ?>
    <img src="<?= $image->crop(400)->url() ?>">
  <?php endforeach ?>
  <p><?= $item->price() ?></p>
<?php endforeach ?>
```

<info>
If you nest structure fields inside a structure field, you have to call the `toStructure()` method on the nested fields as well and then loop through the nested items like above.
</info>


## More information

(link: docs/cookbook/content-structure/structured-field-content text: Structured field content)
