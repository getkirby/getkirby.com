Title: Pages section

----

Intro:

List and edit subpages

----

Text:

## What is a pages section?

A pages section lists the children of a given parent or a set of pages defined by a query. Pages sections also let you do the following operations (if not forbidden or impossible because of other settings):

- create a new page
- delete a page
- change the status of a page
- move a page
- duplicate a page
- change the page slug
- change the page template
- change the order number

(image: pages-section.png)

## Example

```yaml
title: Shop

sections:

  drafts:
    label: Drafts
    type: pages
    status: draft
    templates: product

  published:
    label: Published Products
    type: pages
    status: listed
    templates: product
```

(screencast: https://www.youtube.com/watch?v=rVcg4SlAh-A cover: youtube-section.jpg title: A closer look at pages sections text: Show subpages as cards or list, add additional info for each page, control the card design ‚Äì there are hardly any limits.)

<info>
<p>Sections do not store anything in the content file, which means that you cannot fetch content from a section in your templates like you would from field content.</p>
</info>

## Section shortcuts
For simple sections that are only used once per blueprint, you can use shortcuts. In its most basic form, a `pages` section consists of the section type as name, and  `true` as its value.

```yaml
sections:

  pages: true
```
This will add a `pages` section with all default properties.

These shortcuts can be extended with other section properties as needed, for example:

```yaml
sections:

  pages:
    label: Main Pages
    status: all
```
Keep in mind that the same section name can only be used once per blueprint.


## Section properties

The pages section has multiple options to control what kind of pages should be displayed, how they should be displayed and what happens if a new page is added.

(section-options: pages)

## Label

The label will be displayed above the pages section. You can pass a simple label as a string or you can provide translations for multiple languages, if you have an international editing team.

### Single language

```yaml
label: Articles
```

### Multiple languages
```yaml
label:
  en: Articles
  de: Artikel
  es: Art√≠culos
```

### Placeholders

You can inject information from the current page into the label with template placeholders using our (link: docs/guide/blueprints/query-language text: query language).

```yaml
label: "Articles for {{ page.title }}"
```

## Layout

The pages can either be displayed as a simple list or as cards with preview images. The list view is the default view.

### List layout (default)

The `list` layout is perfect for more text-heavy pages, like articles, link lists, simple pages, etc.

```yaml
layout: list
```

(image: pages-section-list.png)

### Cards layout

The `card` layout is great for media-heavy pages, like galleries, products, projects, etc.

```yaml
layout: cards
```

(image: pages-section-cards.png)

(docs: sections/cardlets)

(image: pages-section-cardlets.png)

### Table layout

The table layout has the highest information density. Columns can be fully customized and make it perfect if you need to show multiple values at once for better overview and scannability.

(image: pages-section-table.png)

```yaml
layout: table
```

The table layout will show the preview image together with a title and info column based on your text and info settings. You can switch off those automatic columns with `image: false`, `text: false` and `info: false` if you want to introduce your own columns.

#### Columns

Custom table columns can be defined with the `columns` option.

```yaml
layout: table
columns:
  subheading: true
  date: true
```

Each column can be customized with additional settings:

##### Label

```yaml
layout: table
columns:
  subheading:
    label: Subheading
```

##### Translated label

```yaml
layout: table
columns:
  subheading:
    label:
      en: Subheading
      de: Unter√ºberschrift
```

##### Alignment

Text alignment can be left (default), center or right.

```yaml
layout: table
columns:
  subheading:
    label: Subheading
    align: right
```

##### Width

The column width can be set with the `width` property.  You can use the usual fractions:

```yaml
layout: table
columns:
  info: false
  subheading:
    label: Subheading
    width: 1/3
  title:
    width: 1/3
  date:
    width: 1/6
  tags:
    width: 1/6
```

##### Value

By default, the table cells contain the field value matching the column name. You can customize the value with a string template.

```yaml
layout: table
columns:
  date:
    label: Date
    value: "{{ page.date.toDate('d.m.Y') }}"
```

##### HTML

Values are converted to safe HTML by default. This is the most secure way to handle content in your Panel. If you know what you are doing and you want to render HTML in a table cell, you can use the html option to stop HTML from being auto-encoded.

```yaml
layout: table
columns:
  html:
    label: HTML
    type: html
    value: "{{ page.someSafeHTML }}"
```

##### Mobile

Set the `mobile` option to `true` for a column to be visible in the mobile view.

```yaml
layout: table
columns:
  subheading:
    label: Subheading
    mobile: true
```

##### Type

To display different content, you can use column types to improve the preview of your data, e.g. `text`, `url`, `tags`.

Check out the [field previews in our Lab](https://lab.getkirby.com/public/lab/components/fieldpreviews/array) to get an overview of the various previews that can be used as column types.

<since v="4.2.0">
##### Customizing default columns

```yaml
layout: table
info: "{{ page.slug }}"
columns:
	title:
		label: Custom title label
	info:
		label: Custom slug label
		width: 10rem
```
</since>

## Page information

You can fine-tune the display text and additional information for every page in the list with the `text` and `info` options.

### `text`

By default the page title is shown in the list for every page. You can use our template syntax with (link: docs/guide/blueprints/query-language text: query language) to fetch any information from the page and display that instead of the title.

```yaml
text: " {{ page.title.upper }}"
```

### `info`

If you want to display additional information for each page, like a date, year, category or any other field value, you can use the template syntax with (link: docs/guide/blueprints/query-language text: query language) in the `info` option.

```yaml
info: " {{ page.date.toDate('Y-m-d') }}"
```

## Preview images

The (preview) image for each item in the list is by default what is (link: docs/reference/panel/blueprints/page#image-options text: configured in the respective page blueprint). However, you can customize these further for your section with the (link: docs/reference/panel/blueprints/page#image-options text: same options) as in the page blueprint:

```yaml
type: pages
image:
  query: page.cover.toFile
  icon: üìù
  back: blue-700
	color: white
  cover: true
```


## Empty state

With the `empty` option you can define the message which is displayed when no pages are listed in the section.

```yaml
empty: No articles yet
```

## Filtering pages

### Parent

By default, the current page is being used as the parent to find children for the list. With this option, any page on your site can be the parent of the section

```yaml
parent: site.find("blog")
```
<since v="4.0.0">
### `query`

The pages section supports a query option to filter the pages that are shown in a section using our (link: docs/guide/blueprints/introduction#query-language text: query string syntax). Manual sorting will be disabled for sections with a query.

```yaml
videoPosts:
  type: pages
  label: Video posts
  query: page.childrenAndDrafts.filterBy('category', 'video')
  template: article

otherPosts:
  type: pages
  label: Other posts
  query: page.childrenAndDrafts.filterBy('category', '!=', 'video')
	template: article
```
The query option cannot only be used in the context of a single page, but you can also query the complete site index if that makes sense, for example in `site.yml`:

```yaml
siteIndex:
	type: pages
	query: site.index(true).notIn(['error'])
	create: default
```
</since>
### Status

You can filter the list of pages by their status. The available status values are

| Status        | Description |
| -             | -           |
| `draft`         | Only drafts will be shown |
| `listed`        | Only listed pages (with a sorting number) will be shown |
| `unlisted`      | Only unlisted pages (without a sorting number) will be shown |
| `published`     | Listed and unlisted pages will be shown |
| `all (default)` | Drafts, listed and unlisted pages will be shown |

```yaml
status: draft
```

Note that an "Add" button for new pages will only be available if you use either `status: draft` or `status: all`.

### Templates

You can define a list of templates that will be available when adding new pages to the section. It  will also be used to filter pages to be contained in the list.

#### Single template
```yaml
template: article
```

#### Multiple templates
```yaml
templates:
  - project
  - article
```

<info>
If only one template is available when [adding a new page](#add-button), the template select will be hidden in the dialog (except when the [`debug` option](/docs/reference/system/options/debug) is active).
</info>

## "Add" button

Editors can add new pages to the section with the "Add" button in the top right corner.

| `status: all` | `status: draft` | `status: listed` | `status: unlisted` |
| -             | -               | -                | -                  |
| + Add         | + Add           |                  |                    |

<info>The add button will only show up if the status option is set to `draft` or `all`</info>

### Why?

New pages are always added as draft. If the "Add" button showed up in sections that only show listed or unlisted pages, the "Add" button would lead to a confusing interaction for editors, as the new page would not show up in the section.

## Sorting

### `sortBy`

You can sort the list of pages by one or more fields/properties in descending or ascending order.

```yaml
sortBy: date desc
sortBy: date desc title asc
sortBy: status desc year desc
```

You can pass (link: https://www.php.net/manual/en/function.sort.php text: PHP sorting type flags), for example to make sorting work with special language specific characters.

```yaml
sortBy: title SORT_LOCALE_STRING
sortBy: title asc SORT_LOCALE_STRING
```

<info>
The `sortBy` option only has an effect on the display order inside this section in the Panel. Because all pages will always be sorted by the field/property you defined, manual drag and drop sorting inside the section is disabled.

However each page can still have its own sorting number, which can be controlled via the page status dialog. If you don't need or want the custom sorting numbers, you need to disable them with the (link: docs/reference/panel/blueprints/page#sorting text: `num` option of the child page blueprint).
</info>

### `flip`

Use the `flip` option to enable/disable reverse sorting (default is `false`):

```yaml
sortBy: title
flip: true
```


### `sortable`

You can switch off manual sorting entirely with the `sortable` option.

```yaml
sortable: false
```

## Limits

### `limit`

The limit property sets how many pages will be shown per page. If there are more entries in the section, the pagination navigation will be shown at the bottom of the section.

```yaml
limit: 20
```

### `max`

You can define a maximum number of pages, that will be allowed in this section. After the maximum is reached, the add button will be hidden and no more pages can be added.

```yaml
max: 10
```

### `min`

You can also define the minimum number of pages, that need to be added in order to make the page valid.

```yaml
min: 2
```

(docs: sections/conditional-sections)

## Search

(image: pages-section-search.png)

Section search is disabled by default. You can use the `search` option to enable it.

```yaml
sections:
  drafts:
    type: pages
    search: true
```

(screencast: https://youtu.be/rC9Up05WVnI cover: youtube-bookmarks.jpg title: Build a bookmark tool text: An example how to build a nice overview with the table layout in the pages section showing all relevant columns.)