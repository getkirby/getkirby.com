Title: 2012
----
Text:

## Launch time!

(image: cake.jpg caption: My wife made a Kirby birthday cake for the launch event)

Kirby launched on January 9th, 2012. I abused the Zootool Twitter account to promote it a bit and also sent out a newsletter to the beta testers, but that was all the launch marketing I could afford. Twitter worked really well at that point and Kirby managed to get quite some decent coverage. It seemed to hit a nerve when systems started to get more and more complex. The performance in combination with the simple setup and easy to sync local and production environments were getting a lot of attention.

(image: v1-website.png caption: The first version of getkirby.com)

Despite the sceptics, Kirby made â‚¬600 in its first months and â‚¬14.000 in its first year. Not enough to be called a raving financial success, but definitely enough to justify some extra time and keep it going.

## Nobody will pay for this (Part 2)

While Shaun Inman kept the source code for his apps behind closed doors, I wanted to offer the same transparency open-source projects offered. I put the entire source code for Kirby on GitHub. Obviously madness. Why would you pay for it, when you can simply download it? The first versions of Kirby came without any license check. But it worked. There were always enough customers that understood the principle of investing in enjoyable software. This principle still works for us today and has generated a very loyal customer base.

## The Panel

(image: panel-1.png class: screenshot caption: Forms in the first Panel version)

When Kirby launched, it was still entirely built to be administrated on the file system. There was no web-based admin interface. You had to create folders and text files manually. The first sites were portfolios, personal blogs and a couple smaller company websites, but without the lack of an interface, Kirby was pretty much useless for less technical people.

Our beta testers had already asked for an interface plenty of times and that feedback just got louder after the launch. So I pushed the first Panel version quite a bit and released it just 10 days after v1.0.

(image: panel-2.png class: screenshot caption: File management)

The first version of the Panel was very simple. Users were able to edit site info and define fields for different page types with blueprints. Files for each page where shown in a simple list. User accounts were hardcoded. But it worked and opened Kirby to a bigger audience.

(image: panel-3.png class: screenshot caption: Editor/preview for the site.txt)

## A 15-year old

In June 2012, I received one of the first code contributions for Kirby. One of our users created a way to load plugins from folders in the plugins directory instead of adding individual plugins as single PHP files. His name was Lukas, and he was quite good with PHP. He turned up with more and more contributions, issues and comments over the next weeks and months, and I was impressed how well the open-source principle still worked despite the commercial model.

I learned a bit later that this guy was 15 at the time. You just have to love the internet sometimes. Lukas quickly became a constant in the Kirby community. Does the name sound familiar?

## Cheat sheet

(image: cheatsheet.jpg caption: The original Kirby cheat sheet. Made in InDesign ðŸ™ˆ)

With a growing community and more customers, the demand for documentation and support also grew. It's one thing that has not changed in 10 years. Documentation is everything. You can never underestimate the effect of good docs. We invest a lot of time in our documentation and in support and see it not just as a service for our users, but also as a marketing tool.

The very first effort to provide better docs for Kirby 1 was the famous (file: cheatsheet.pdf text: cheat sheet). I cannot believe that I really created this in InDesign and published it as a PDF. It later turned into our (link: docs/reference text: reference) â€¦ which is just slightly more extensive than that PDF.

## A self-made mess

How do you collect feedback and offer support for a brand new file-based CMS? What a stupid question! You build a file-based forum of course.

(image: forum.png caption: The first Kirby forum)

The first forum launched in May 2012 and ran for almost 3 years. The code was shoehorned into a plugin and had weird hacks all over the place. The folder system was pretty straight forward though:

```filesystem
category-a/
  category.txt
  thread-a/
    thread.txt
    reply-a/
      reply.txt
    reply-b/
      reply.txt
```

Authentication was handled through Twitter. Over the years, thousands of threads and posts were created and it held up quite nicely. But it missed a lot of essential community features. There was no notification system, no proper way to see new replies or any other form of activity.

I was really impressed by the performance of the file system and pleased by that first forum version. After all, my focus was on Kirby and not the forum itself. I never questioned the effects on the community. Conversations werenâ€™t really working well and overall engagement was pretty poor.

When we switched from our self-made mess to (link: https://discourse.org text: Discourse) in 2015, the community really took off. Support requests via email were instantly cut in half. Itâ€™s sometimes not very clever to build your own tools, when your focus should be on your main product.

