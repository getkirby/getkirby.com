Title: Fiber
----
Intro:
----
Text:

## Areas

Every section of the panel is a separated area with routes, optional menu item, icon, breadcrumb label, access permissions, etc.

## Default areas

The following "areas" are installed by default:

- account
- installation
- login
- settings
- site
- users

## Area definition

Areas are defined in a callback function that receives the `$kirby` instance and must return their configuration as an array

```php
return function (Kirby $kirby) {
	return [
		// icon for the menu and breadcrumb
	  'icon'  => 'home',

		// Label for the menu and the breadcrumb
    'label' => t('site'),

		// optional replacement for the breadcrumb label
		'breadcrumbLabel' => function () {
			return kirby()->site()->title()->or(t('site'))->value();
		},

		// show/hide from menu
    'menu'  => true,

		// the menu link
    'link'  => 'site',

		// routes for the area
		'routes' => [
			[
				// All panel patterns must not start with 'panel/'
				// The panel slug is automatically prepended.
				'pattern' => 'site',
				'action'  => function () {

					// app routes return a simple array
					// which will be injected into our Vue app
					// The array can control the loaded Vue component,
					// props for the component and settings for the current view
					// (like breadcrumb, title, active search type etc)
					return [

						// The Vue view component is stored in
						// panel/src/components/Views and will be loaded
						// by the Vue app. For plugins, it can also be
						// created manually in a plugin index.js
						'component' => 'k-site-view',

						// the breadcrumb can be just an array or a callback
						// function for more complex breadcrumb logic.
						'breadcrumb' => function () {
							// each item in the breadcrumb array
							// has a label and a link attribute
							return [
								[
									'label' => 'My page',
									'link'  => '/site/pages+mypage'
								]
							];
						},

						// props will be directly available in the
						// Vue component. It's a super convenient way
						// to send backend data to the Panel
						'props' => [
							...
						]

						// we can preset the search type with the
						// search attribute
						'search' => 'pages',
						'title' => 'My Page'

					];
				}
			]
		]
}
```

## Area plugins

Plugins can create their own Panel areas. Areas can be just a single view or really complex applications with multiple routes.

```php
Kirby::plugin('yourname/todos', [
	'areas' => [
		'todos' => [
			'label' => 'Todos',
			'icon'  => 'check',
			'menu' => true
			'link' => 'todos',
			'routes' => [
				[
					'pattern' => 'todos',
					'action'  => function () {
						return [
							'component' => 'k-todos-view',
							'title' => 'Todos',
							'props' => [
								'todos' => [...]
							]
						]
					}
				]
			]
		]
	]
])
```

```js
panel.plugin('yourname/todos', {
	components: {
		'k-todos-view': {
			props: {
				todos: Array
			},
			template: ...
		}
	}
})
```

## Dialogs

The new Fiber dialogs are created mainly on the backend. They all reuse the same dialog components.

`k-form-dialog`

For dialogs with form fields and submit buttons

`k-remove-dialog`

To confirm deleting items

`k-text-dialog`

For dialogs with a custom text message

## Dialog setup

Dialogs are defined as a part of areas

```php
return function (Kirby $kirby) {
	return [
		'dialogs' => [
			// the key of the dialog defines the dialog routing pattern
			'site/changeName' => function () {
				// The load event is creating a GET route at
				// /panel/dialogs/{pattern}
				//
				// It returns the setup for the dialog, including
				// used component, buttons, props, etc.
				'load' => function () {
					return [
						'component' => 'k-form-dialog',
						'props' => [
							// field definition for the form dialog
							'fields' => [ ... ],
							// the prefilled model data
							'value' => [ ]
						]
					]
				},
				// the submit event is creating a POST route at
				// /panel/dialogs/{pattern}
				//
				// The submit button of the dialog is automatically
				// wired to fire the POST request with the form
				// data or whatever data the dialog provides
				'submit' => function () {
						site()->changeName(get('name'));
						return true;
				}
			}
		]
	]
};
```

## Submit event responses

The Dialog submit has multiple ways to interact with the component.

`return void|null|false`

Returning nothing or false is interpreted as a 404. It suggests that the model could not be found.

`return true`

Returning true is interpreted as a success and will automatically close the dialog. Closing the dialog will trigger an event, defined by the dialog routing pattern. I.e. `site/changeTitle` will trigger an event `site.changeTitle` with the return value of the submit event. (In this case simply `true`)

`return [ ... ]`

By returning an array, you gain more control of what happens when the dialog closes. You can pass data to the event, dispatch Vuex events and more.

```php
return [
	'event' => 'site.customEvent',
	'data'  => [
		// some data for the event
	],
];
```

`throw new Exception`

Any exception is interpreted as an error and will show the error message box in the dialog containing the exception message

`Panel::go()`

You can redirect the Panel to a different location after submitting the dialog by calling

```php
Panel::go('some/path');
```
