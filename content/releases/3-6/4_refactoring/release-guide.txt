Title: Refactoring
----

Text:

## Core

### Namespace changes
We refactored many file-related classes and started to gather all of them in the new `Kirby\Filesystem` namespace:

| Before 3.6 | In 3.6 | Description |
|-|-|-|
| Kirby\Toolkit\File | `Kirby\Filesystem\File` | Everything related to a file in the filesystem - takes over a lot of functionality that was previously part of `Kirby\Image\Image` even for non-images |
| Kirby\Image\Image | `Kirby\Image\Image` | Now extends `Kirby\Filesystem\File` and adds image-related methods (e.g. `dimensions`, `exif`) |
| Kirby\Cms\FileFoundation | `Kirby\Filesystem\IsFile` | Adds method-proxying to an asset object - either to `Kirby\Filesystem\File` or `Kirby\Image\Image` depending on the file type of the `$root` property |
| Kirby\Cms\Asset | `Kirby\Filesystem\Asset` | |
| Kirby\Cms\Filename | `Kirby\Filesystem\Filename` | |
| Kirby\Toolkit\Dir | `Kirby\Filesystem\Dir` | |
| Kirby\Toolkit\F | `Kirby\Filesystem\F` | |
| Kirby\Toolkit\Mime | `Kirby\Filesystem\Mime` | |

We also moved and merged some more classes to simplify our setup:

| Before 3.6 | In 3.6 | Reference |
|-|-|-|
| Kirby\Cms\Form | `Kirby\Form\Form` | [#3312](https://github.com/getkirby/kirby/pull/3312) |
| Kirby\Cms\KirbyTag | `Kirby\Text\KirbyTag` | [#3296](https://github.com/getkirby/kirby/pull/3296) |
| Kirby\Cms\KirbyTags | `Kirby\Text\KirbyTags` | [#3296](https://github.com/getkirby/kirby/pull/3296) |

<info>
For all these changes, we have added class aliases that we will keep around until at least Kirby 4. This will make sure that your class references continue to work.
</info>


### New `Kirby\Panel` classes

The new namespace also holds some new classes, e.g. `Kirby\Panel\Page` or `Kirby\Panel\File`. We moved some Panel-related methods from the normal model classes to these, e.g. in case of `$page`:

| Before 3.6 | In 3.6 |
|-|-|
| Kirby\Cms\Page::dragText() | `Kirby\Panel\Page::dragText()` |
| Kirby\Cms\Page::panelId() | `Kirby\Panel\Page::id()` |
| Kirby\Cms\Page::panelImage() | `Kirby\Panel\Page::image()` |
| Kirby\Cms\Page::panelOptions() | `Kirby\Panel\Page::options()` |
| Kirby\Cms\Page::panelPath() | `Kirby\Panel\Page::path()` |
| Kirby\Cms\Page::panelPickerData() | `Kirby\Panel\Page::pickerData()` |
| Kirby\Cms\Page::panelUrl() | `Kirby\Panel\Page::url()` |

We added a new `->panel()` method to all models to access the Panel objects, so `$page->panelImage()` is now `$page->panel()->image()`.

In addition, we moved and merged some other classes to streamline our setup:

| Before 3.6 | In 3.6 |
|-|-|
| Kirby\Cms\Panel | `Kirby\Panel\Panel` |
| Kirby\Cms\PanelPlugins | `Kirby\Panel\Plugins` |

### More…

- `$field->html()` uses `Html::encode()`


## Fiber
We’ve spent the last months working on a brand-new backend architecture for the Panel. Moving away from a single page application to a more traditional approach with a simplified server-rendered backend. The new architecture is inspired by Inertia.js and simplifies our Panel and Panel plugins in ways that we’ve never dreamed of.

### Fiber?

The single page application architecture has served us well in Kirby 3 until now. But we also realized that adding features always means adding tons of JavaScript. Every new route, dialog, every new field type and section increases the amount of JS the Panel will send back to our users – and there's hardly any way out of it. But we want less JS, not more.

This is where the new Fiber concept really shines. It takes all the routing and state management back to the server. Whatever can be prepared in PHP will be prepared in PHP, and our Vue application is mainly responsible for displaying the Panel afterwards and adding the interactive bits and pieces. If you've ever heard of Turbolink, Pjax or similar approaches, you already know mostly what Fiber does.

#### Here's how Fiber works

When you visit the Panel for the first time, a regular HTTP request is sent to the server. The server will render the Panel HTML document, which looks like this (simplified):

```html "/panel"
<html>
  <head>
    <link rel="stylesheet" href="/app.css">
  </head>
  <div id="app"></div>
  <script>
    const fiber = '<?= json_encode([
      'user' => [...],
      'view' => [...],
      'translation' => [...],
      // etc.
    ]) ?>';
  </script>
  <script src="/app.js">
</html>
```

The JS fiber object is populated with data from PHP. The server injects all the data that the Panel needs for that particular view that way.
Now Vue.js kicks in and only renders that view with the data in the `fiber` object.

### Routing

When you now click on a link in the Panel, the event is intercepted and a JS fetch request is sent to the server. This fetch request will no longer return the entire Panel document, but only the updated Fiber object for the new view.

```js "/panel/pages/page-a"
{
  "user": {...},
  "view": {...},
  "translation": {...}
  // etc.
}
```
Fiber now does two things:

1. It updates the URL in the browser
2. It refreshes the Vue app with the new state from the new Fiber object

Whenever you reload the same URL afterwards, you go back to the beginning and the server will return the full document again with the same state.

### What makes this approach so great?

- Routing is done in PHP with our good old Kirby router.
- We can exactly control what data needs to be sent for each view.
- State can be handled on the server with good old sessions.
- The API is not affected by any of this and can be a lot less specific.
- The bundle size does not blow up with new routes or new requirements for state management.
- Less logic in JS and a lot less complicated Vue components. You throw in state via props and that's it.
- Every view is super easy to test on the backend with PHPUnit.

### Not just views

We've taken this concept and extended it to more parts of the Panel. Dialogs are now also handled with a similar approach and we are already working on search, dropdowns and more.

### A lot less JS

With this approach, we already managed to cut a huge 100 KB+ chunk out of our Vue.js application. It's massive and it's so much fun.

### Why not just Inertia.js?

Fiber is mainly inspired by (link: https://inertiajs.com/ text: Inertia.js). But the more we dug into the concept, the more ways we found how we can adjust and improve the principles of Inertia for our own needs. First, we implemented our own client implementation of Inertia. Then we started changing lots of parts on the backend. In the end, the basic request concept is still the same, but the implementation is very different. It felt confusing to use the same name. You cannot lookup things in the Inertia.js docs when you work with the Panel. Dialogs and other ideas for future Fiber Panel features don't exist in Inertia. Fiber seemed like an appropriate alternative term.


## Panel

### From Vue CLI to Vite

We've moved our build and development process for the Panel to [Vite](https://vitejs.dev). Vite massively increases the HMR performance during development, the build times and also the bundle size. It's a joy to work with.

Local development can now be done directly on the site domain when using the [Kirby Sandbox](https://github.com/getkirby/sandbox). Run `npm run dev` inside `kirby/panel` and open the Panel as normal.

### New custom CSS properties and logical properties

Our RTL support is now powered by [CSS logical properties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties). For now with fallback code for older browsers. We encourage all plugin developers to look into logical properties for their Panel plugins.

With 3.6 we leave SCSS behind and fully embrace modern CSS with (link: docs/reference/plugins/ui#css-properties text: custom properties) and (link: docs/reference/plugins/ui#logical-properties text: logical properties) in the Panel.


### More…

- New `window.deprecated()` helper for the Panel frontend
- CI uses dynamically-built production files for frontend testing
- Fixed deprecated slot syntax for Vue components [#3308](https://github.com/getkirby/kirby/pull/3308)
- Removed unapplied classes in the `Header` component [#3315](https://github.com/getkirby/kirby/pull/3315)
- Removed `$t()` from prop defaults [#3304](https://github.com/getkirby/kirby/pull/3304)
- `vuex-i18n` was replaced with a custom implementation. [#2969](https://github.com/getkirby/kirby/pull/2969)
- Replaced Panel event bus with `mitt` [#3191](https://github.com/getkirby/kirby/pull/3191)
- The former development `panel/index.html` file was removed
- The internal Panel sandbox has been removed
- The `api.csrf` option is automatically set to `dev` when the `panel.dev` option is true
- Moved `panel/src/component/Blocks` to `panel/src/component/Forms/Blocks`
- Moved `panel/src/component/Writer` to `panel/src/component/Forms/Writer`
- Refactored async code to async/wait [#3694](https://github.com/getkirby/kirby/pull/3694)
