Title: Refactored Forms

----

Text: 

Weâ€™ve refactored our Form and Field classes to provide a more stable and usable Form API for our models. You can now use the same Form API for your own projects to create forms in your templates.

## Setting up a form

```php
use Kirby\Form\Form;

$form = new Form(
    fields: [
        'name' => [
            'label' => 'Name',
            'type'  => 'text'
        ],
        'email' => [
            'label' => 'Email',
            'type'  => 'email'
        ],
        'message' => [
            'label' => 'Message',
            'type'  => 'textarea'
        ]
    ]
);
```

### Setting up a form for a model

If you've already created all the required form fields for a page, user, file or the site in your blueprints, you can simply create a full form with all fields for the model by using the `Form::for()` method.

```php
use Kirby\Form\Form;

$form = Form::for(
    model: $page
);

// inspect all auto-generated form fields
dump($form->fields());
```

### Specifying the form language

```php
$form = Form::for(
    model: $page, 
    language: 'de'
);
```

## Providing initial values

```php
use Kirby\Form\Form;

$form = new Form(
    fields: [
        'name' => [
            'label' => 'Name',
            'type'  => 'text'
        ],
        'email' => [
            'label' => 'Email',
            'type'  => 'email'
        ],
        'message' => [
            'label' => 'Message',
            'type'  => 'textarea'
        ]
    ]
);

$form->fill([
    'name'  => 'Peter Griffin',
    'email' => 'mail@example.com'
]);

// inspect the existing form values
dump($form->toFormValues());
```

### Passing through unknown fields

If you want to pass through values for undefined fields, you can use the passthrough argument. Be careful though because this can be abused to inject unwanted values if you provide dynamic input here.

```php
use Kirby\Form\Form;

$form = new Form(
    fields: [
        'name' => [
            'label' => 'Name',
            'type'  => 'text'
        ],
        'email' => [
            'label' => 'Email',
            'type'  => 'email'
        ],
        'message' => [
            'label' => 'Message',
            'type'  => 'textarea'
        ]
    ]
);

$input = [
    'name'   => 'Peter Griffin',
    'hidden' => 'Some additional info',
];

$form->fill(
    input: $input,
    passthrough: true
);

dump($form->toFormValues());
// will only include the `hidden` value 
// if `passthrough` has been set to `true`
```

### Filling fields with defaults

```php
$form = new Form(
  fields: [
    'a' => [
      'default' => 'Some default value',
      'type'    => 'text'
    ],
    'b' => [
	    'type' => 'text',
    ]
  ]
);

$form->fill($form->defaults());

// fill in additional values afterwards to overwrite defaults
$form->fill([
  'b' => 'A value for the field without default'
]);

dump($form->toFormValues());
// a => 'Some default value'
// b => 'A value for the field without default'
```

## Submitting values

```php
use Kirby\Form\Form;

$form = new Form(
    fields: [
        'name' => [
            'label' => 'Name',
            'type'  => 'text'
        ],
        'email' => [
            'label' => 'Email',
            'type'  => 'email'
        ],
        'message' => [
            'label' => 'Message',
            'type'  => 'textarea'
        ]
    ]
);

$form->submit([
    'name'    => 'Peter Griffin',
    'email'   => 'mail@example.com',
    'message' => 'Hello'
]);
```

### Submitting closure values

```php
$form = new Form(
  fields: [
    'text' => [
      'type'  => 'text',
      'value' => 'Text'
    ]
  ],
);

$form->submit([
  'text' => function ($value) {
    return 'Modified ' . $value;
  },
]);

dump($form->toFormValues());
// text => 'Modified Text'

```

### Submitting unknown fields

Just like the `::fill()` method, `::submit()` can also receive values for unknown fields. Again: Be careful though because this can be abused to inject unwanted values if you provide dynamic input here.

```php
use Kirby\Form\Form;

$form = new Form(
    fields: [
        'name' => [
            'label' => 'Name',
            'type'  => 'text'
        ],
        'email' => [
            'label' => 'Email',
            'type'  => 'email'
        ],
        'message' => [
            'label' => 'Message',
            'type'  => 'textarea'
        ]
    ]
);

$input = [
    'name'   => 'Peter Griffin',
    'hidden' => 'Some additional info',
];

$form->submit(
    input: $input,
    passthrough: true
);

dump($form->toFormValues());
// will only include the `hidden` value 
// if `passthrough` has been set to `true`
```

## Resetting form values

Once you've filled the form or submitted values, you might want to reset the values again. 

```php
use Kirby\Form\Form;

$form = new Form(
  fields: [
    'text' => [
      'type' => 'text'
    ]
  ]
);

$form->fill([
  'text' => 'Some text',
]);

$form->toFormValue()
// text => 'Some text'

$form->reset();

$form->toFormValue()
// text => ''
```

## Accessing fields

The `Kirby\Form\Form::fields()` method will give you a `Kirby\Form\Fields` collection. You can use this collection to loop through all fields or access individual fields.

```php
use Kirby\Form\Form;

$form = new Form(
    fields: [
        'name' => [
            'label' => 'Name',
            'type'  => 'text'
        ],
        'email' => [
            'label' => 'Email',
            'type'  => 'email'
        ],
        'message' => [
            'label' => 'Message',
            'type'  => 'textarea'
        ]
    ]
);

// looping through fields
foreach ($form->fields() as $field) {
    dump($field->label());
}

// Accessing a single field
$form->field('name')->type();

// A missing field will throw an exception
$form->field('does-not-exist')
```

## Accessing values

We've already used the `::toFormValues()` method a couple times in the example above. This will give you an array of values that can be used to create the HTML output for each field with the correct value. We use this in the Panel to set the value for each Vue field component. Attention: Some or our core field types (e.g. the blocks field, the files field, the structure field, etc.) might extend the value with additional info that is needed for the Panel. 

```php
use Kirby\Form\Form;

$form = new Form(
    fields: [
        'name' => [
            'label' => 'Name',
            'type'  => 'text'
        ],
        'email' => [
            'label' => 'Email',
            'type'  => 'email'
        ],
        'message' => [
            'label' => 'Message',
            'type'  => 'textarea'
        ]
    ]
);

$form->fill([
    'name'  => 'Peter Griffin',
    'email' => 'mail@example.com',
]);

dump($form->toFormValues());
```

If you want to store submitted Form values in a text file for example, you can use the `::toStoredValues()` method, which will turn each value into a version that is made to be stored.

```php
use Kirby\Form\Form;

$form = new Form(
    fields: [
        'name' => [
            'label' => 'Name',
            'type'  => 'text'
        ],
        'email' => [
            'label' => 'Email',
            'type'  => 'email'
        ],
        'message' => [
            'label' => 'Message',
            'type'  => 'textarea'
        ]
    ]
);

$form->submit([
    'name'  => 'Peter Griffin',
    'email' => 'mail@example.com',
]);

dump($form->toStoredValues());
```